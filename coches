package com.example.api.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.api.models.Coche;
import com.example.api.models.Persona;
import com.example.api.repositories.CocheRepository;
import com.example.api.repositories.PersonaRepository;

@RestController
public class CocheController {

	@Autowired
	private CocheRepository repositorio;
	
	@Autowired
	private PersonaRepository repository;

	CocheController(CocheRepository repositorio) {
		this.repositorio = repositorio;
	}
	
	@CrossOrigin("http://127.0.0.1:5500")
	@PostMapping
	public ResponseEntity<Coche> createCoche(@RequestBody Coche coche) {
		if (coche.getPersona() == null || coche.getPersona().getId() == null) {
			return ResponseEntity.badRequest().build();
		}
		
		Optional<Persona> personaOpt = repository.findById(coche.getPersona().getId());
		if (personaOpt.isEmpty()) {
			return ResponseEntity.badRequest().build();
		}
		
		coche.setPersona(personaOpt.get());
		Coche savedCoche = repositorio.save(coche);
		return ResponseEntity.ok(savedCoche);
	}

	@CrossOrigin("http://127.0.0.1:5500")
	@GetMapping("/api/coches")
	public List<Coche> obtenerCoche() {
		return repositorio.findAll();
	}

	@CrossOrigin("http://127.0.0.1:5500")
	@GetMapping("/api/coche/{id}")
	public ResponseEntity<Coche> obtenerCoche(@PathVariable Long id) {
		Optional<Coche> opt = repositorio.findById(id);
		if (opt.isEmpty()) {
			return ResponseEntity.badRequest().build();
		} else {
			return ResponseEntity.ok(opt.get());
		}
	}

	@CrossOrigin("http://127.0.0.1:5500")
	@PostMapping("/api/coches")
	public ResponseEntity<Coche> guardarCoche(@RequestBody Coche coche) {
		if (coche.getId() != null) {
			return ResponseEntity.badRequest().build();
		}
		repositorio.save(coche);
		return ResponseEntity.ok(coche);
	}

	@CrossOrigin(origins = "http://127.0.0.1:5500", allowedHeaders = "*", methods = {RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE})
	@PutMapping("/api/coches/{id}")
	public ResponseEntity<Coche> actualizarCoche(@RequestBody Coche coche) {
	    if (coche.getId() == null || !repositorio.existsById(coche.getId())) {
	        return ResponseEntity.badRequest().build();
	    }
	    repositorio.save(coche);
	    return ResponseEntity.ok(coche);
	}

	@CrossOrigin("http://127.0.0.1:5500")
	@DeleteMapping("/api/coches/{id}")
	public ResponseEntity<Coche> borrarCoche(@PathVariable Long id) {
		if (id == null || !repositorio.existsById(id)) {
			return ResponseEntity.badRequest().build();
		}
		repositorio.deleteById(id);
		return ResponseEntity.noContent().build();
	}
}





// MODELS




package com.example.api.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.api.models.Coche;
import com.example.api.models.Persona;
import com.example.api.repositories.CocheRepository;
import com.example.api.repositories.PersonaRepository;

@RestController
public class CocheController {

	@Autowired
	private CocheRepository repositorio;
	
	@Autowired
	private PersonaRepository repository;

	CocheController(CocheRepository repositorio) {
		this.repositorio = repositorio;
	}
	
	@CrossOrigin("http://127.0.0.1:5500")
	@PostMapping
	public ResponseEntity<Coche> createCoche(@RequestBody Coche coche) {
		if (coche.getPersona() == null || coche.getPersona().getId() == null) {
			return ResponseEntity.badRequest().build();
		}
		
		Optional<Persona> personaOpt = repository.findById(coche.getPersona().getId());
		if (personaOpt.isEmpty()) {
			return ResponseEntity.badRequest().build();
		}
		
		coche.setPersona(personaOpt.get());
		Coche savedCoche = repositorio.save(coche);
		return ResponseEntity.ok(savedCoche);
	}

	@CrossOrigin("http://127.0.0.1:5500")
	@GetMapping("/api/coches")
	public List<Coche> obtenerCoche() {
		return repositorio.findAll();
	}

	@CrossOrigin("http://127.0.0.1:5500")
	@GetMapping("/api/coche/{id}")
	public ResponseEntity<Coche> obtenerCoche(@PathVariable Long id) {
		Optional<Coche> opt = repositorio.findById(id);
		if (opt.isEmpty()) {
			return ResponseEntity.badRequest().build();
		} else {
			return ResponseEntity.ok(opt.get());
		}
	}

	@CrossOrigin("http://127.0.0.1:5500")
	@PostMapping("/api/coches")
	public ResponseEntity<Coche> guardarCoche(@RequestBody Coche coche) {
		if (coche.getId() != null) {
			return ResponseEntity.badRequest().build();
		}
		repositorio.save(coche);
		return ResponseEntity.ok(coche);
	}

	@CrossOrigin(origins = "http://127.0.0.1:5500", allowedHeaders = "*", methods = {RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE})
	@PutMapping("/api/coches/{id}")
	public ResponseEntity<Coche> actualizarCoche(@RequestBody Coche coche) {
	    if (coche.getId() == null || !repositorio.existsById(coche.getId())) {
	        return ResponseEntity.badRequest().build();
	    }
	    repositorio.save(coche);
	    return ResponseEntity.ok(coche);
	}

	@CrossOrigin("http://127.0.0.1:5500")
	@DeleteMapping("/api/coches/{id}")
	public ResponseEntity<Coche> borrarCoche(@PathVariable Long id) {
		if (id == null || !repositorio.existsById(id)) {
			return ResponseEntity.badRequest().build();
		}
		repositorio.deleteById(id);
		return ResponseEntity.noContent().build();
	}
}


// REPOSITORY

package com.example.api.repositories;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.api.models.Coche;

@Repository
public interface CocheRepository extends JpaRepository<Coche, Long>{


}



// POM

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>api</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>api</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.example</groupId>
			<artifactId>api1</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


// APP PROPERTIES

spring.application.name=api

server.port=8080

# usuario y password del servidor del bbdd
spring.datasource.url=jdbc:mysql://localhost:3306/prueba?useSSL=false
spring.datasource.username=Pires
spring.datasource.password=Pires
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
